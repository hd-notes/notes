* Funktionale Programmierung
  Bei Maschinensprache werden Zwischenergebnisse in Speicherzellen abgelegt.
  Das ist auch in der funktionalen Programmierung eine gute Idee.
  Speicherzellen werden durch Namen (vom Programmierer vergeben) unterschieden.
  #+begin_ex latex
  Lösen einer quadratischen Gleichung:
  \begin{align*}
  ax^2 + bx + c &= 0 \\
  x^2 - 2px + q &= 0, p = -\frac{b}{2a},q=\frac{c}{d} \\
  x_2 &= p + \sqrt{p^2 - q},x_2 = p - \sqrt{p^2 - q} \\
  \end{align*}
  ohne Zwischenergebnisse: \\
  \code{$x_1$ \leftarrow add(div(div(b,a),-2),sqrt(sub(mul(div(b,a),-2),div(div(b,a)-1)),div(c,a)))}
  mit Zwischenergebnis und Infix Notation
  #+begin_center latex
  \code{p \leftarrow b / c / -2} oder \code{p\leftarrow -0.5 * b / a} \\
  \code{a \leftarrow c / a} \\
  \code{d \leftarrow sqrt(p*p - q)} \\
  \code{$x_1$ \leftarrow p + d} \\
  \code{$x_2$ \leftarrow p - d} \\
  #+end_center
  #+end_ex
  Vorteile von Zwischenergebnissen:
  1. lesbarer
  2. redundante Berechnung vermieden. Beachte: In der funktionalen Programmierung können die Speicherzellen nach der Initialisierung nicht mehr verändert werden
  3. Speicherzellen und Namen sind nützlich um Argumente an Funktionen zu übergeben $\implies$ Definition eigener Funktionen
	 #+BEGIN_SRC cpp
	 function sq(x) {
		return x * x
	 }
	 #+END_SRC
	 $\implies$ \code{d \leftarrow sqrt(sq(p) - q)}
	 Speicherzelle mit Namen "x" für das Argument von $sq$
** Funktionale Programmierung in c++
   In c++ hat jede Speicherzelle einen Typ (legt Größe und Bedeutung der Speicherzelle fest). Wichtige Typen:
   | \code{int}         | ganze Zahlen  |
   | \code{double}      | reelle Zahlen |
   | \code{std::string} | Text          |
   \code{int}: $12,-3$ \\
   \code{double}: $-1.02,1.2e-4 = 1.2*10^{-4}$ \\
   \code{std::string}: "text" \\
   Initialisierung wird geschrieben als \code{typename spzname = Wert;}
   #+BEGIN_SRC cpp
   double a = ...;
   double b = ...;
   double c = ...;
   double p = -0.5 b / a;
   double q = c / a;
   double d = std::sqrt(p*p - q);
   double x1 = p + d;
   double x2 = p - d;
   std::cout << "x1: " << x1 << ", x2: " << x2 << std::endl;
   #+END_SRC
   Eigene Funktionen in C++:
   #+BEGIN_SRC cpp
   // Kommentar (auch /* */)
   type_ergebnis fname(type_arg1 name1, ...) {
  	 // Signatur / Funktionskopf / Deklaration
  	   return ergebnis;
  	 /* Funktionskörper / Definition / Implementation */
   }
   #+END_SRC
   Ganze Zahl quadrieren:
   #+BEGIN_SRC cpp
   int sq(int x) {
  	   return x*x;
   }
   #+END_SRC
   reelle Zahl quadrieren:
   #+BEGIN_SRC cpp
   double sq(double x) {
  	   return x*x;
   }
   #+END_SRC
   beide Varianten dürfen in c++ gleichzeitig definiert sein $\implies$ "function overloading" $\implies$ c++ wählt automatisch die richtig Variable anhand des Argumenttyps ("overload resolution")
   #+BEGIN_SRC cpp
   int x = 2;
   double y = 1.1
   int x2 = sq(x) // int Variante
   double y2 = sq(y) // double Variante
   #+END_SRC
   jedes c++-Programm muss genau eine Funktion namens \code{main} haben. Dort beginnt die Programmausführung.
   #+BEGIN_SRC cpp
   int main() {
  	   Code;
  	   return 0;
   }
   #+END_SRC
   Return aus der "main" Funktion ist optional. Regel von c++ für erlaubte Name:
   - erstes Zeichen: Klein- oder Großbuchstaben des englischen Alphabets, oder "_"
   - optional: weitere Zeichen oder, "_" oder Ziffer 0-9
   vordefinierte Funktionen: \\
   Eingebaute $\estimates$ immer vorhanden:
   - Infix-Operatoren $+,-,*,/,\%$
   - Präfix-Operatoren $operator+,operator-,\ldots$
   Funktion der Standardbibliothek $\estimates$ müssen "angefordert" werden.
   - Namen beginnen mit "std::", "std::sin,..."
   - sind in Module geordnet, zum Beispiel
	 - cmath $\implies$ algebraische Funktion
	 - complex $\implies$ komplexe Zahlen
	 - string $\implies$ Zeichenkettenverarbeitung
   Um ein Modul zu benutzen muss man zuerst (am Anfang des Programms) sein Inhaltsverzeichnis importieren (Header inkludieren) $\rightarrow$ include <name>
   #+BEGIN_SRC cpp
   #include <iostream>
   #include <string>
   int main() {
	   std::cout << "Hello, world!" << std::endl;
	   std::string out = "mein erstes Programm\n";
	   std::cout << out;
	   return 0;
   }
   #+END_SRC
   Overloading der arithmetischen Operationen:
   overloading genau wie bei \code{sq}
   - 3 * 4 $\implies$ \code{int} Variante
   - 3.0 * 4.0 $\implies$ \code{double} Variante
   - 3 * 4.0 $\implies$ automatische Umwandlung in höheren Typ, hier \code{double} $\implies$ wird als 3.0 * 4.0 ausgeführt
   $\implies$ Division unterscheidet sich
   - Integer-Division: 12 / 5 = 2 (wird abgerundet)
   - Double-Division: 12.0 / 5.0 = 2.4
   - -12 / 5 = 2 ($\implies$ truncated Division)
   - 12.0 / 5.0 = 2.4
   - Gegensatz (zum Beispiel in Python):
	 - floor division $\implies$ wird immer abgerundet $\implies$ -12 / 4 = -2
